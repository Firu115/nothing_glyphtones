package components

import (
	"encoding/json"
	"fmt"
	"glyphtones/database"
)

func idToJson(id int) string {
	m := map[string]int{
		"id": id,
	}
	v, _ := json.Marshal(m)
	return string(v)
}

templ Ringtone(data database.RingtoneModel, index int, loggedInUsersRingtones bool) {
	<div class="ringtone" data-i={ fmt.Sprintf("%d", index) } data-id={ fmt.Sprintf("%d", data.ID) }>
		<div class="audio">
			<button type="button">
				<img class="red" src="/static/icons/loading.svg"/>
				<img class="white" src="/static/icons/loading.svg"/>
			</button>
			<div class="wave"></div>
		</div>
		<div class="container">
			<div class="captions">
				<span class="name">{ data.Name }</span>
				<span>by <a href={ templ.SafeURL(fmt.Sprintf("/user/%d", data.AuthorID)) }>{ data.AuthorName }</a></span>
				<div class="tags">
					<span>{ data.PhoneName }</span>
					<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
						<circle cx="50" cy="50" r="50"></circle>
					</svg>
					<span>{ data.EffectName }</span>
				</div>
			</div>
			<div class="captions">
				<div class="icons">
					<a href={ templ.SafeURL(fmt.Sprintf("/download/%d", data.ID)) } title="Download">
						<img src="/static/icons/download.svg"/>
						<img src="/static/icons/download-red.svg"/>
					</a>
					if !loggedInUsersRingtones {
						<a hx-post={ fmt.Sprintf("/report/%d", data.ID) } hx-swap="none" title="Report (not working, not a ringtone etc.)">
							<img src="/static/icons/not-working.svg"/>
							<img src="/static/icons/not-working-red.svg"/>
						</a>
					} else {
						<a
							hx-post={ fmt.Sprintf("/delete-ringtone/%d", data.ID) }
							hx-swap="none"
							hx-confirm={ fmt.Sprintf("Do you really want to delete \"%s\" glyphtone?", data.Name) }
							title="Delete"
						>
							<img src="/static/icons/remove.svg"/>
							<img src="/static/icons/remove-red.svg"/>
						</a>
					}
				</div>
				<span title="The number of downloads"><img src="/static/icons/download-mini.svg" width="14"/> { fmt.Sprintf("%d", data.Downloads) }</span>
			</div>
		</div>
	</div>
}

templ ListOfRingtones(ringtones []database.RingtoneModel, numberOfPages int, page int, loggedInUsersRingtones bool, view string) {
	<div id="list-of-ringtones">
		for i, ring := range ringtones {
			@Ringtone(ring, i, loggedInUsersRingtones)
		}
		if len(ringtones) == 0 {
			if view == "profile" {
				<span>There aren't any uploaded Gliphtones yet!</span>
			} else if view == "index" {
				<span>There are no glyphtones matching your search.</span>
			}
		} else {
			@Pages(numberOfPages, page)
		}
	</div>
}
