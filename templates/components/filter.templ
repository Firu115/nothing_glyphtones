package components

import (
	"fmt"
	"glyphtones/database"
	"strings"
)

templ Search(value string) {
	<input name="s" type="text" placeholder="Search..." value={ value }/>
}

var categories []string = []string{"Ringtones", "Notifications", "Other"}
var sortOptions []string = []string{"Popular", "Latest", "Name (A-Z)"}

templ CategorySelectUpload(value string) {
	<select name="c" required>
		if value == "" {
			<option value="" selected disabled hidden>Choose category</option>
		}
		for i, v := range categories {
			<option
				value={ fmt.Sprintf("%d", i + 1) }
				if string(i + 1) == value {
					selected
				}
			>{ v }</option>
		}
	</select>
}

templ CategorySelect(value int) {
	<select name="c">
		<option
			value="0"
			if value == 0 {
				selected
			}
		>All categories</option>
		for i, v := range categories {
			<option
				value={ fmt.Sprintf("%d", i + 1) }
				if i + 1 == value {
					selected
				}
			>{ v }</option>
		}
	</select>
}

templ PhoneSelect(phones []database.PhoneModel, value string) {
	<select name="p">
		if value == "" {
			<option value="" selected disabled hidden>Select phone</option>
			for _, v := range phones {
				<option value={ fmt.Sprintf("%d", v.ID) }>Phone { v.Name }</option>
			}
		} else {
			for _, v := range phones {
				if fmt.Sprintf("%d", v.ID) == value {
					<option value={ fmt.Sprintf("%d", v.ID) } selected>Phone { v.Name }</option>
				} else {
					<option value={ fmt.Sprintf("%d", v.ID) }>Phone { v.Name }</option>
				}
			}
		}
	</select>
}

templ EffectSelect(effects []database.EffectModel, value string) {
	<select name="e" required>
		if value == "" {
			<option value="" selected disabled hidden>Select effect</option>
			for _, v := range effects {
				<option value={ fmt.Sprintf("%d", v.ID) }>{ v.Name }</option>
			}
		} else {
			for _, v := range effects {
				if fmt.Sprintf("%d", v.ID) == value {
					<option value={ fmt.Sprintf("%d", v.ID) } selected>{ v.Name }</option>
				} else {
					<option value={ fmt.Sprintf("%d", v.ID) }>{ v.Name }</option>
				}
			}
		}
	</select>
}

templ PhonesCheckboxes(phones []database.PhoneModel) {
	<span>Phones</span>
	<div id="checkboxes">
		for _, phone := range phones {
			<label>
				<input
					id="phone"
					type="checkbox"
					value={ fmt.Sprintf("%d", phone.ID) }
					checked?={ phone.Selected }
				/>
				<span class="checkmark"></span>
				<span class="name">Phone { phone.Name }</span>
			</label>
		}
	</div>
}

templ EffectsCheckboxes(effects []database.EffectModel) {
	<span>Effects</span>
	<div id="checkboxes">
		for _, effect := range effects {
			<label>
				<input
					id="effect"
					type="checkbox"
					value={ fmt.Sprintf("%d", effect.ID) }
					checked?={ effect.Selected }
				/>
				<span class="checkmark"></span>
				<span class="name">{ effect.Name }</span>
			</label>
		}
	</div>
}

templ Sort(value string) {
	<select name="o">
		for _, v := range sortOptions {
			<option
				value={ strings.ToLower(v) }
				if strings.ToLower(v) == value {
					selected
				}
			>{ v }</option>
		}
	</select>
}
